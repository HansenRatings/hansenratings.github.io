minWidth = 60,
header = with_tooltip(
"A+",
"Average games, the percentage of games where the team performed at an average level or better"),
format = colFormat(percent = TRUE,
digits = 0),
style = color_scales(Resume_Rankings,
colors = white_to_orange)),
BA = colDef(
minWidth = 60,
header = with_tooltip(
"BA",
"Below average games, the percentage of games where the team performed at a below average level"),
format = colFormat(percent = TRUE,
digits = 0),
style = color_scales(Resume_Rankings,
colors = blue_to_white)),
EAW = colDef(
minWidth = 60,
header = with_tooltip(
"EAW",
"Elite adjusted wins, how many more/fewer games the team has won than an elite team (+36 points per game relative to an average team) would be expected to win"),
format = colFormat(digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_orange)),
GAW = colDef(
minWidth = 60,
header = with_tooltip(
"GAW",
"Good adjusted wins, how many more/fewer games the team has won than a good team (+18 points per game relative to an average team) would be expected to win"),
format = colFormat(digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_orange)),
AAW = colDef(
minWidth = 60,
header = with_tooltip(
"AAW",
"Average adjusted wins, how many more/fewer games the team has won than an average team would be expected to win"),
format = colFormat(digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_orange)),
Wins = colDef(
minWidth = 60,
header = with_tooltip(
"Wins",
"Season-to-date wins against all opponents")),
Losses = colDef(
minWidth = 70,
header = with_tooltip(
"Losses",
"Season-to-date losses against all opponents")),
'DIII W' = colDef(
minWidth = 65,
header = with_tooltip(
"DIII W",
"Season-to-date wins against Division III opponents")),
'DIII L' = colDef(
minWidth = 60,
header = with_tooltip(
"DIII L",
"Season-to-date losses against Division III opponents")),
'Conf W' = colDef(
minWidth = 75,
header = with_tooltip(
"Conf W",
"Season-to-date wins against conference opponents (may not align with official conference standings, if the team plays some conference members as a 'non-conference' opponent)")),
'Conf L' = colDef(
minWidth = 70,
header = with_tooltip(
"Conf L",
"Season-to-date losses against conference opponents (may not align with official conference standings, if the team plays some conference members as a 'non-conference' opponent)"))
)) %>%
add_title("2023 DIII Football Resume Rankings") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Resume Rankings.html")
Game_Proj %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = TRUE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Home = colDef(
minWidth = 200),
'H Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'H Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Away = colDef(
minWidth = 200,
sticky = "left"),
'A Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'A Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Spread = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Total = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'Game Score' = colDef(
minWidth = 100,
header = with_tooltip(
"Game Score",
"A meaningless number that correlates with the quality of the teams and how close the game is expected to be"),
format = colFormat(digits = 3),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31")))
)) %>%
add_title("2023 DIII Football Game Projections") %>%
add_subtitle(game_week) %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Week 4.html")
Schedules %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = FALSE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Rank = colDef(
minWidth = 60,
header = with_tooltip(
"Rank",
"Teams are ranked according to a mixture of all of the metrics on this page - 'who did you beat, and how well did you play?'"),
sticky = "left"),
Team = colDef(
minWidth = 200,
filterable = TRUE,
sticky = "left"),
Conf = colDef(
minWidth = 95,
filterable = TRUE),
Region = colDef(
minWidth = 70,
filterable = TRUE),
'To-Date SOS' = colDef(
minWidth = 75,
header = with_tooltip(
"To-Date SOS",
"To-date strength of schedule, represented as the average expected win probability of the team's past opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'To-Date SOS+' = colDef(
minWidth = 75,
header = with_tooltip(
"To-Date SOS+",
"To-date strength of schedule 'plus', represented as the average expected win probability of the team's past opponents against a typical Top 25 team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'To-Date NCSOS' = colDef(
minWidth = 75,
header = with_tooltip(
"To-Date NCSOS",
"To-date non-conference strength of schedule, considering non-conference opponents only, represented as the average expected win probability of the team's past opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
SOS = colDef(
minWidth = 75,
header = with_tooltip(
"SOS",
"Strength of schedule, represented as the average expected win probability of the team's opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'SOS+' = colDef(
minWidth = 75,
header = with_tooltip(
"SOS+",
"Strength of schedule 'plus', represented as the average expected win probability of the team's opponents against a typical Top 25 team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
NCSOS = colDef(
minWidth = 75,
header = with_tooltip(
"NCSOS",
"Non-conference strength of schedule, considering non-conference opponents only, represented as the average expected win probability of the team's opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'Future SOS' = colDef(
minWidth = 75,
header = with_tooltip(
"Future SOS",
"Future strength of schedule, represented as the average expected win probability of the team's future opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'Future SOS+' = colDef(
minWidth = 75,
header = with_tooltip(
"Future SOS+",
"Future strength of schedule 'plus', represented as the average expected win probability of the team's future opponents against a typical Top 25 team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'Future NCSOS' = colDef(
minWidth = 75,
header = with_tooltip(
"Future NCSOS",
"Future non-conference strength of schedule, considering non-conference opponents only, represented as the average expected win probability of the team's future opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange))
)) %>%
add_title("2023 DIII Football Strength of Schedule") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Schedule Strength.html")
setwd("C:/Users/logan/OneDrive/R/Hansen Ratings")
Game_Proj <- read_csv("2023 Week 4 Games.csv")
Game_Proj %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = TRUE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Home = colDef(
minWidth = 200),
'H Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'H Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Away = colDef(
minWidth = 200,
sticky = "left"),
'A Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'A Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Spread = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Total = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'Game Score' = colDef(
minWidth = 100,
header = with_tooltip(
"Game Score",
"A meaningless number that correlates with the quality of the teams and how close the game is expected to be"),
format = colFormat(digits = 3),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31")))
)) %>%
add_title("2023 DIII Football Game Projections") %>%
add_subtitle(game_week) %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Week 4.html")
setwd("C:/Users/logan/OneDrive/Documents/hansenratings.github.io")
Game_Proj %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = TRUE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Home = colDef(
minWidth = 200),
'H Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'H Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Away = colDef(
minWidth = 200,
sticky = "left"),
'A Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'A Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Spread = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Total = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'Game Score' = colDef(
minWidth = 100,
header = with_tooltip(
"Game Score",
"A meaningless number that correlates with the quality of the teams and how close the game is expected to be"),
format = colFormat(digits = 3),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31")))
)) %>%
add_title("2023 DIII Football Game Projections") %>%
add_subtitle(game_week) %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Week 4.html")
setwd("C:/Users/logan/OneDrive/R/Hansen Ratings")
Season_Sim <- read_csv("2023 Week 4 Season Simulation.csv")
setwd("C:/Users/logan/OneDrive/Documents/hansenratings.github.io")
Season_Sim %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
School = colDef(
headerStyle = list(display = "flex", justifyContent = "center"),
minWidth = 200,
filterable = TRUE,
sticky = "left"),
Conf = colDef(
minWidth = 95,
filterable = TRUE),
Wins = colDef(
minWidth = 100,
header = with_tooltip(
"Wins",
"Projected wins for the season, considering only games against DIII opponents"),
format = colFormat(digits = 1),
style = function(value) {
bar_style(width = 0.65*value / max(Season_Sim$Wins), fill = "#323e4f")
}),
Losses = colDef(
minWidth = 100,
header = with_tooltip(
"Losses",
"Projected losses for the season, considering only games against DIII opponents"),
format = colFormat(digits = 1),
style = function(value) {
bar_style(width = 0.65*value / max(Season_Sim$Losses), fill = "#323e4f")
}),
'Pool A' = colDef(
minWidth = 75,
header = with_tooltip(
"Pool A",
"Odds the team qualifies for the DIII playoffs through Pool A, also known as an automatic bid"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
'Pool C' = colDef(
minWidth = 75,
header = with_tooltip(
"Pool C",
"Odds the team qualifies for the DIII playoffs through Pool C, also known as an at-large bid"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
Playoffs = colDef(
minWidth = 75,
header = with_tooltip(
"Playoffs",
"Odds the team qualifies for the DIII playoffs through either Pool A or Pool C (football does not have any bids for Pool B)"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
Change = colDef(
minWidth = 75,
header = with_tooltip(
"Change",
"Change in the team's playoffs odds since last week"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = blue_to_orange)),
Bowl = colDef(
minWidth = 75,
header = with_tooltip(
"Bowl",
"Odds the team receives an automatic bid to their conference's bowl tie-in. Only conferences with automatic tie-ins are projected."),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange))
)) %>%
add_title("2023 DIII Football Season Simulation") %>%
add_subtitle("Results from 10,000 simulations of the 2023 season using predictive Hansen Ratings",
font_size = 15, font_weight = "normal", font_style = "italic") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Season Simulation.html")
