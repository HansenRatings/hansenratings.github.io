library(RSelenium)
library(XML)
library(dplyr)
library(purrr)
library(rvest)
library(stringr)
library(readr)
# shell('docker run -d -p 4445:4444 selenium/standalone-chrome')
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "chrome")
remDr$open()
remDr$open()
remDr$navigate("https://d3football.com/conf/NESCAC/2022/schedule")
remDr$screenshot(display = TRUE)
remDr$getScreenshot()
install.packages("rselenium")
remDr$close()
remDr$open()
remDr$navigate("https://d3football.com/conf/NESCAC/2022/schedule")
source("C:/Users/logan/OneDrive/R/Hansen Ratings/pbp scraper.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/pbp scraper.R", echo=TRUE)
remDr <- remoteDriver(remoteServerAddr = "localhost",
port = 4445L,
browserName = "chrome",
extraCapabilities =
list("chrome_binary" = "C://Program Files/Google/Chrome/Application/chrome.exe"))
remDr$open()
# Navigate to the URL
remDr$navigate(first_url)
# Get the page source
page_source <- remDr$getPageSource()[[1]]
# Close the browser
remDr$close()
# Load the page source into an XML document
page <- read_html(page_source)
# Specify the XPath expression
xpath_expression <- '//*[@id="ui-accordion-1-panel-0"]'
# Extract data using the XPath expression
extracted_data <- html_nodes(page, xpath = xpath_expression) %>% html_text()
# Display the extracted data
print(extracted_data)
first_url
remDr$open()
# Navigate to the URL
remDr$navigate(first_url)
# Get the page source
page_source <- remDr$getPageSource()[[1]]
# Close the browser
remDr$close()
# Load the page source into an XML document
page <- read_html(page_source)
# Specify the XPath expression
xpath_expression <- '//*[@id="contentarea"]/div[3]/div[3]'
# Extract data using the XPath expression
extracted_data <- html_nodes(page, xpath = xpath_expression) %>% html_text()
# Display the extracted data
print(extracted_data)
# Specify the XPath expression
xpath_expression <- '//*[@id="contentarea"]/div[3]'
# Extract data using the XPath expression
extracted_data <- html_nodes(page, xpath = xpath_expression) %>% html_text()
# Display the extracted data
print(extracted_data)
# Split the long string by "\n" and trim whitespaces
extracted_data_vector <- strsplit(trimws(extracted_data), "\n")[[1]]
# Display the extracted data as a vector
print(extracted_data_vector)
# Split the long string by "\n" and trim whitespaces
extracted_data_vector <- trimws(strsplit(extracted_data), "\n")[[1]]
# Split the long string by "\n" and trim whitespaces
extracted_data_vector <- trimws(strsplit(extracted_data, "\n")[[1]])
# Display the extracted data as a vector
print(extracted_data_vector)
extracted_data_vector <- extracted_data_vector[nzchar(extracted_data_vector)]
extracted_data_vector <- extracted_data_vector[nzchar(extracted_data_vector)]
# Display the extracted data as a vector
print(extracted_data_vector)
]
''
/
source("C:/Users/logan/OneDrive/R/Hansen Ratings/Website update code.R", echo=TRUE)
library(googlesheets4)
install.packages("rlang")
library(tidyr)
install.packages(c("AsioHeaders", "askpass", "bigD", "bit", "bit64", "bitops", "bslib", "cachem", "caTools", "chromote", "cli", "colorspace", "commonmark", "cowplot", "cpp11", "crayon", "curl", "data.table", "DescTools", "digest", "e1071", "evaluate", "expm", "farver", "fastmap", "fontawesome", "fs", "generics", "ggplot2", "gld", "glue", "gt", "gtable", "gtExtras", "haven", "highr", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lmom", "lubridate", "magick", "markdown", "mime", "mvtnorm", "openssl", "packrat", "pillar", "PKI", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppTOML", "reactR", "readxl", "renv", "rmarkdown", "rsconnect", "rstudioapi", "sass", "scales", "shiny", "shinydashboard", "stringi", "sys", "tibble", "tinytex", "tzdb", "utf8", "uuid", "V8", "webshot2", "websocket", "withr", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("AsioHeaders", "askpass", "bigD", "bit", "bit64", "bitops", "bslib", "cachem", "caTools", "chromote", "cli", "colorspace", "commonmark", "cowplot", "cpp11", "crayon", "curl", "data.table", "DescTools", "digest", "e1071", "evaluate", "expm", "farver", "fastmap", "fontawesome", "fs", "generics", "ggplot2", "gld", "glue", "gt", "gtable", "gtExtras", "haven", "highr", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lmom", "lubridate", "magick", "markdown", "mime", "mvtnorm", "openssl", "packrat", "pillar", "PKI", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppTOML", "reactR", "readxl", "renv", "rmarkdown", "rsconnect", "rstudioapi", "sass", "scales", "shiny", "shinydashboard", "stringi", "sys", "tibble", "tinytex", "tzdb", "utf8", "uuid", "V8", "webshot2", "websocket", "withr", "xfun", "XML", "xml2", "yaml", "zip"))
install.packages(c("AsioHeaders", "askpass", "bigD", "bit", "bit64", "bitops", "bslib", "cachem", "caTools", "chromote", "cli", "colorspace", "commonmark", "cowplot", "cpp11", "crayon", "curl", "data.table", "DescTools", "digest", "e1071", "evaluate", "expm", "farver", "fastmap", "fontawesome", "fs", "generics", "ggplot2", "gld", "glue", "gt", "gtable", "gtExtras", "haven", "highr", "htmltools", "httpuv", "jsonlite", "knitr", "later", "lmom", "lubridate", "magick", "markdown", "mime", "mvtnorm", "openssl", "packrat", "pillar", "PKI", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppTOML", "reactR", "readxl", "renv", "rmarkdown", "rsconnect", "rstudioapi", "sass", "scales", "shiny", "shinydashboard", "stringi", "sys", "tibble", "tinytex", "tzdb", "utf8", "uuid", "V8", "webshot2", "websocket", "withr", "xfun", "XML", "xml2", "yaml", "zip"))
library(tidyr)
install.packages("pillar")
library(tidyr)
install.packages("cli")
library(tidyr)
library(tidyr)
install.packages("tidyr")
library(tidyr)
library(cli)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
hyper_games_2024 <- read_csv(
hyper_games_url_2024,
col_names = FALSE)
colnames(hyper_games_2024) <- c(
"Day", "Date", "Game_ID", "Row_ID", "Team_ID", "HFA", "Score")
combined_games_2024 <- hyper_games_2024 %>%
left_join(hyper_games_2024, by = "Game_ID")
library(tidyr)
combined_games_2024 <- hyper_games_2024 %>%
left_join(hyper_games_2024, by = "Game_ID")
combined_games_2024 <- hyper_games_2024 %>%
left_join(hyper_games_2024, by = "Game_ID")
combined_games_2024 <- hyper_games_2024 %>%
left_join(hyper_games_2024, by = "Game_ID")
??left_join
library(dplyr)
combined_games_2024 <- hyper_games_2024 %>%
left_join(hyper_games_2024, by = "Game_ID")
combined_games_2024
hyper_games_2024
combined_games_2024 <- hyper_games_2024 %>%
left_join(hyper_games_2024,
by = c("Day", "Date", "Game_ID"))
combined_games_2024
temp_games_2024 <- hyper_games_2024 %>%
transmute(Game_ID, Opp_ID = Team_ID, Opp_Score = Score)
combined_games_2024 <- hyper_games_2024 %>%
left_join(temp_games_2024,
by = "Game_ID")
combined_games_2024
35%%10
1%%2
temp_games_2024 <- hyper_games_2024 %>%
transmute(Row_ID = if_else(Row_ID%%2 == 1, Row_ID+1, Row_ID-1),
Opp_ID = Team_ID,
Opp_Score = Score)
combined_games_2024 <- hyper_games_2024 %>%
left_join(temp_games_2024,
by = "Row_ID")
combined_games_2024
combined_games_2024 <- hyper_games_2024 %>%
left_join(temp_games_2024,
by = "Row_ID") %>%
mutate(Win = if_else(Score > Opp_Score, 1, 0),
Loss = if_else(Score < Opp_Score, 1, 0))
combined_games_2024
hyper_games_2024 <- hyper_games_2024 %>%
filter(Date < 20241120)
temp_games_2024 <- hyper_games_2024 %>%
transmute(Row_ID = if_else(Row_ID%%2 == 1, Row_ID+1, Row_ID-1),
Opp_ID = Team_ID,
Opp_Score = Score)
combined_games_2024 <- hyper_games_2024 %>%
left_join(temp_games_2024,
by = "Row_ID") %>%
mutate(Win = if_else(Score > Opp_Score, 1, 0),
Loss = if_else(Score < Opp_Score, 1, 0))
combined_games_2024
combined_games_2024 <- hyper_games_2024 %>%
left_join(temp_games_2024,
by = "Row_ID") %>%
mutate(Win = if_else(Score > Opp_Score, 1, 0),
Loss = if_else(Score < Opp_Score, 1, 0),
Adj_Win = case_when(
HFA == 0 ~ 1*Win,
HFA == 1 ~ 0.9*Win,
HFA == -1 ~ 1.1*Win,
TRUE ~ 0),
Adj_Loss = case_when(
HFA == 0 ~ 1*Loss,
HFA == -1 ~ 0.9*Loss,
HFA == 1 ~ 1.1*Loss,
TRUE ~ 0))
combined_games_2024
team_summary <- combined_games_2024 %>%
group_by(Team_ID) %>%
summarize(Wins = sum(Win),
Losses = sum(Loss),
Win_Perc = sum(Win)/(sum(Win)+sum(Loss)),
Adj_Wins = sum(Adj_Win),
Adj_Losses = sum(Adj_Loss),
Adj_Win_Perc = sum(Adj_Win)/(sum(Adj_Win)+sum(Adj_Loss)))
team_summary
temp_team_summary <- team_summary %>%
transmute(Opp_ID = Team_ID,
Opp_Adj_WP = Adj_Win_Perc)
combined_games_2024 <- combined_games_2024 %>%
left_join(temp_team_summary,
by = Opp_ID)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
temp_team_summary
combined_games_2024
combined_games_2024 <- combined_games_2024 %>%
left_join(temp_team_summary,
by = "Opp_ID")
combined_games_2024
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games_2024
combined_games_2024 %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games_2024 <- combined_games_2024 %>%
left_join(temp_team_summary,
by = "Opp_ID") %>%
mutate(Adj_SOS = Game_Wt * SOS,
QWB = if_else(Win > 0 & SOS > QWB_Base,
SOS - QWB_Base, 0),
Adj_QWB = Game_Wt * QWB,
Game_NPI = WP_Coeff*Win +
SOS_Coeff*SOS +
QWB_Mult*QWB,
Adj_Game_NPI = Game_Wt * Game_NPI)
team_summary <- combined_games_2024 %>%
group_by(Team_ID) %>%
summarize(Wins = sum(Win),
Losses = sum(Loss),
Games = Wins+Losses,
WP = Wins/Games,
Adj_Wins = sum(Adj_Win),
Adj_Losses = sum(Adj_Loss),
Adj_Games = Adj_Wins+Adj_Losses,
Adj_WP = Adj_Wins/Adj_Games,
SOS = mean(Adj_SOS) / Adj_Games,
QWB = mean(Adj_QWB) / Adj_Games,
NPI = mean(Adj_Game_NPI) / Adj_Games)
team_summary
team_summary$Adj_WP %>% mean()
combined_games_2024$SOS %>% hist()
combined_games_2024$Game_Wt %>% hist()
team_summary$SOS %>% hist()
team_summary <- combined_games_2024 %>%
group_by(Team_ID) %>%
summarize(Wins = sum(Win),
Losses = sum(Loss),
Games = Wins+Losses,
WP = Wins/Games,
Adj_Wins = sum(Adj_Win),
Adj_Losses = sum(Adj_Loss),
Adj_Games = Adj_Wins+Adj_Losses,
Adj_WP = Adj_Wins/Adj_Games,
SOS = sum(Adj_SOS) / Adj_Games,
QWB = sum(Adj_QWB) / Adj_Games,
NPI = sum(Adj_Game_NPI) / Adj_Games)
team_summary %>% arrange(desc(NPI))
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
temp_opp_summary
combined_games
combined_games %>% View()
combined_games %>%
left_join(temp_team_summary,
by = "Team_ID") %>% View()
combined_games <- combined_games %>%
select(-SOS) %>%
left_join(temp_team_summary,
by = "Team_ID") %>%
left_join(temp_opp_summary,
by = "Opp_ID") %>%
mutate(QWB = if_else(Win > 0 & SOS > QWB_Base,
SOS - QWB_Base, 0),
Game_NPI = WP_Coeff*Win +
SOS_Coeff*SOS +
QWB_Mult*QWB,
Keep = case_when(
Win == 1 & Game_NPI < NPI ~ 0,
Loss == 1 & Game_NPI > NPI ~ 0,
TRUE ~ 1),
New_Game_Wt = Keep * Game_Wt)
temp_team_summary <- combined_games %>%
group_by(Team_ID) %>%
summarize(Adj_Wins = sum(Adj_Win * Keep))
temp_team_summary %>% View()
temp_team_summary <- combined_games %>%
group_by(Team_ID) %>%
summarize(Adj_Wins = sum(Adj_Win),
Kept_Adj_Wins = sum(Adj_Win * Keep))
temp_team_summary %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games
combined_games %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
temp_team_summary
temp_team_summary %>% View()
combined_games %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
temp_team_summary %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
# Merge back into full game list
combined_games <- combined_games %>%
left_join(
win_games %>%
select(Game_ID, Team_ID, Keep_Wt),
by = c("Game_ID", "Team_ID")
) %>%
mutate(
Keep_Wt = if_else(is.na(Keep_Wt), 0, Keep_Wt),  # For non-wins
New_Game_Wt = case_when(
Win == 1 & Game_NPI > NPI ~ Game_Wt,
Loss == 1 & Game_NPI < NPI ~ Game_Wt,
Keep_Wt > 0 ~ Game_Wt * Keep_Wt,
TRUE ~ 0),
Kept_Adj_Win = Win * Keep_Wt,
Kept_Adj_Loss = Loss * Keep_Wt
)
combined_games %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
new_tables
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
new_tables
new_tables <- NPI_Iteration(team_summary, combined_games)
new_tables <- NPI_Iteration(team_summary, combined_games)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_summary
cumulative_NPI_change
new_tables <- NPI_Iteration(team_summary, combined_games)
team_summary <- new_tables[[1]]
combined_games <- new_tables[[2]]
cumulative_NPI_change <- new_tables[[3]]
cumulative_NPI_change
new_tables <- NPI_Iteration(team_summary, combined_games)
combined_games
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games %>% names()
new_combined_games %>% names()
combined_games %>% names()
combined_games %>% names()
new_combined_games %>% names()
team_summary %>% names()
new_team_summary %>% names()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
# new_tables <- NPI_Iteration(team_summary, combined_games)
# team_summary <- new_tables[[1]]
# new_combined_games <- new_tables[[2]]
# combined_games <- new_combined_games %>%
#   select(Day, Date, Game_ID, Row_ID, Team_ID,
#          HFA, Score, Opp_ID, Opp_Score, Win,
#          Loss, Adj_Win, Adj_Loss, Game_Wt, SOS,
#          Adj_SOS, QWB, Adj_QWB, Game_NPI, Adj_Game_NPI)
# cumulative_NPI_change <- new_tables[[3]]
#
new_tables <- NPI_Iteration(team_summary, combined_games)
new_tables[[1]]
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_summary
team_summary %>%View()
combined_games %>%View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_summary <- teams_url %>%
left_join(team_summary)
team_summary %>% View()
team_names <- read_csv(
teams_url,
col_names = FALSE)
colnames(hyper_games) <- c(
"Team_ID", "Team_Name")
team_summary <- teams_url %>%
left_join(team_summary)
team_summary
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_summary %>% View()
team_summary <- team_names %>%
left_join(team_summary)
team_summary %>% View()
team_summary %>% transmute(Team_Name, SOS = 100*SOS, QWB = 100*QWB, NPI = 100*NPI) %>% arrange(desc(NPI)) %>% View()
team_names
team_names %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_summary %>% View()
team_summary %>% transmute(Team_Name, SOS = 100*SOS, QWB = 100*QWB, NPI = 100*NPI) %>% arrange(desc(NPI)) %>% View()
team_names %>% tail()
hyper_games %>% filter(Date == 20240914)
hyper_games %>% tail()
team_names %>% filter(Team_Name == "Nichols" | Team_Name == "Hartwick")
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_names %>% View()
hyper_games %>% View()
combined_games %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_summary %>% View()
team_summary %>% transmute(Team_Name, SOS = 100*SOS, QWB = 100*QWB, NPI = 100*NPI) %>% arrange(desc(NPI)) %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
team_names %>% filter(Team_Name == "Trinity_TX")
combined_games %>% filter(Team_ID == 201 %>% View())
combined_games %>% filter(Team_ID == 201) %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/NCAA Percentage Index.R", echo=TRUE)
combined_games %>% filter(Team_ID == 201) %>% View()
source("C:/Users/logan/OneDrive/R/Hansen Ratings/Optimized NCAA Percentage Index.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/2025 Season Simulation EC2 Results Downloader.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/Website update code.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/Website update code.R", echo=TRUE)
#
Season_Sim_Table %>%
save_reactable_test(paste("Temp ",season," Season Simulation.html", sep = ""))
modify_reactable_html(input_file = paste("Temp ",season," Season Simulation.html", sep = ""),
output_file = paste(season," Season Simulation.html", sep = ""),
page_title = paste("Hansen Ratings - ",season," Season Simulation", sep = ""))
