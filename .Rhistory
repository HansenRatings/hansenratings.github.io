library(RSelenium)
library(XML)
library(dplyr)
library(purrr)
library(rvest)
library(stringr)
library(readr)
# shell('docker run -d -p 4445:4444 selenium/standalone-chrome')
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445L, browserName = "chrome")
remDr$open()
remDr$open()
remDr$navigate("https://d3football.com/conf/NESCAC/2022/schedule")
remDr$screenshot(display = TRUE)
remDr$getScreenshot()
install.packages("rselenium")
remDr$close()
remDr$open()
remDr$navigate("https://d3football.com/conf/NESCAC/2022/schedule")
source("C:/Users/logan/OneDrive/R/Hansen Ratings/pbp scraper.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/pbp scraper.R", echo=TRUE)
remDr <- remoteDriver(remoteServerAddr = "localhost",
port = 4445L,
browserName = "chrome",
extraCapabilities =
list("chrome_binary" = "C://Program Files/Google/Chrome/Application/chrome.exe"))
remDr$open()
# Navigate to the URL
remDr$navigate(first_url)
# Get the page source
page_source <- remDr$getPageSource()[[1]]
# Close the browser
remDr$close()
# Load the page source into an XML document
page <- read_html(page_source)
# Specify the XPath expression
xpath_expression <- '//*[@id="ui-accordion-1-panel-0"]'
# Extract data using the XPath expression
extracted_data <- html_nodes(page, xpath = xpath_expression) %>% html_text()
# Display the extracted data
print(extracted_data)
first_url
remDr$open()
# Navigate to the URL
remDr$navigate(first_url)
# Get the page source
page_source <- remDr$getPageSource()[[1]]
# Close the browser
remDr$close()
# Load the page source into an XML document
page <- read_html(page_source)
# Specify the XPath expression
xpath_expression <- '//*[@id="contentarea"]/div[3]/div[3]'
# Extract data using the XPath expression
extracted_data <- html_nodes(page, xpath = xpath_expression) %>% html_text()
# Display the extracted data
print(extracted_data)
# Specify the XPath expression
xpath_expression <- '//*[@id="contentarea"]/div[3]'
# Extract data using the XPath expression
extracted_data <- html_nodes(page, xpath = xpath_expression) %>% html_text()
# Display the extracted data
print(extracted_data)
# Split the long string by "\n" and trim whitespaces
extracted_data_vector <- strsplit(trimws(extracted_data), "\n")[[1]]
# Display the extracted data as a vector
print(extracted_data_vector)
# Split the long string by "\n" and trim whitespaces
extracted_data_vector <- trimws(strsplit(extracted_data), "\n")[[1]]
# Split the long string by "\n" and trim whitespaces
extracted_data_vector <- trimws(strsplit(extracted_data, "\n")[[1]])
# Display the extracted data as a vector
print(extracted_data_vector)
extracted_data_vector <- extracted_data_vector[nzchar(extracted_data_vector)]
extracted_data_vector <- extracted_data_vector[nzchar(extracted_data_vector)]
# Display the extracted data as a vector
print(extracted_data_vector)
]
''
/
source("C:/Users/logan/OneDrive/R/Hansen Ratings/Website update code.R", echo=TRUE)
source("C:/Users/logan/OneDrive/R/Hansen Ratings/Website update code.R", echo=TRUE)
Season_Sim %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
School = colDef(
headerStyle = list(display = "flex", justifyContent = "center"),
minWidth = 200,
filterable = TRUE,
sticky = "left"),
Conf = colDef(
minWidth = 95,
filterable = TRUE),
Wins = colDef(
minWidth = 100,
header = with_tooltip(
"Wins",
"Projected wins for the season"),
format = colFormat(digits = 1),
style = function(value) {
bar_style(width = 0.65*value / max(Season_Sim$Wins), fill = "#323e4f")
}),
Losses = colDef(
minWidth = 100,
header = with_tooltip(
"Losses",
"Projected losses for the season"),
format = colFormat(digits = 1),
style = function(value) {
bar_style(width = 0.65*value / max(Season_Sim$Losses), fill = "#323e4f")
}),
ConfW = colDef(
minWidth = 100,
header = with_tooltip(
"ConfW",
"Projected conference wins for the season"),
format = colFormat(digits = 1),
style = function(value) {
bar_style(width = 0.65*value / max(Season_Sim$Wins), fill = "#323e4f")
}),
ConfL = colDef(
minWidth = 100,
header = with_tooltip(
"ConfL",
"Projected conference losses for the season"),
format = colFormat(digits = 1),
style = function(value) {
bar_style(width = 0.65*value / max(Season_Sim$Losses), fill = "#323e4f")
}),
NPI = colDef(
minWidth = 60,
header = with_tooltip(
"NPI",
"Projected final NPI, the NCAA's new metric used to automate playoff selection and seeding"),
format = colFormat(digits = 1),
style = color_scales(Season_Sim,
colors = blue_to_orange)),
Rank = colDef(
minWidth = 70,
header = with_tooltip(
"Rank",
"Average final NPI ranking. To get a Pool C bid, teams need a ranking in the low 30s, depending on how many conf. champs rank outside the top 40."),
format = colFormat(digits = 1)),
SOS = colDef(
minWidth = 60,
header = with_tooltip(
"SOS",
"Projected final SOS, using the NPI calculation for SOS"),
format = colFormat(digits = 1),
style = color_scales(Season_Sim,
colors = blue_to_orange)),
QWB = colDef(
minWidth = 60,
header = with_tooltip(
"QWB",
"Projected final Quality Win Bonus, which gives teams a boost for beating teams with an NPI >54.0"),
format = colFormat(digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
'Pool A' = colDef(
minWidth = 75,
header = with_tooltip(
"Pool A",
"Odds the team qualifies for the DIII playoffs through Pool A, also known as an automatic bid"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
'Pool C' = colDef(
minWidth = 75,
header = with_tooltip(
"Pool C",
"Odds the team qualifies for the DIII playoffs through Pool C, also known as an at-large bid"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
Playoff = colDef(
minWidth = 75,
header = with_tooltip(
"Playoff",
"Odds the team qualifies for the DIII playoffs through either Pool A or Pool C (DIII no longer uses Pool B)"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
Change = colDef(
minWidth = 75,
header = with_tooltip(
"Change",
"Change in the team's playoffs odds since last week"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = blue_to_orange)),
Leverage = colDef(
minWidth = 90,
header = with_tooltip(
"Leverage",
"How much a team's playoff odds depending on whether they win or lose this week"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
`Top 8%` = colDef(
minWidth = 75,
header = with_tooltip(
"Top 8%",
"Odds of earning a protected Top 8 seed"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange)),
Bowl = colDef(
minWidth = 75,
header = with_tooltip(
"Bowl",
"Odds the team receives an automatic bid to their conference's bowl tie-in. Only conferences with automatic tie-ins are projected."),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Season_Sim,
colors = white_to_orange))#,
# 'R40W%' = colDef(
#   minWidth = 75,
#   header = with_tooltip(
#     "R40W%",
#     "Odds the team wins a game or receives a bye in the round of 40"),
#   format = colFormat(percent = TRUE,
#                      digits = 1),
#   style = color_scales(Season_Sim,
#                        colors = white_to_orange)),
# 'R32W%' = colDef(
#   minWidth = 75,
#   header = with_tooltip(
#     "R32W%",
#     "Odds the team wins a game in the round of 32"),
#   format = colFormat(percent = TRUE,
#                      digits = 1),
#   style = color_scales(Season_Sim,
#                        colors = white_to_orange)),
# 'R16W%' = colDef(
#   minWidth = 75,
#   header = with_tooltip(
#     "R16W%",
#     "Odds the team wins a game in the round of 16"),
#   format = colFormat(percent = TRUE,
#                      digits = 1),
#   style = color_scales(Season_Sim,
#                        colors = white_to_orange)),
# 'R8W%' = colDef(
#   minWidth = 75,
#   header = with_tooltip(
#     "R8W%",
#     "Odds the team wins a game in the round of 8 (quarterfinals)"),
#   format = colFormat(percent = TRUE,
#                      digits = 1),
#   style = color_scales(Season_Sim,
#                        colors = white_to_orange)),
# 'R4W%' = colDef(
#   minWidth = 75,
#   header = with_tooltip(
#     "R4W%",
#     "Odds the team wins a game in the round of 4 (semifinals)"),
#   format = colFormat(percent = TRUE,
#                      digits = 1),
#   style = color_scales(Season_Sim,
#                        colors = white_to_orange)),
# 'R2W%' = colDef(
#   minWidth = 75,
#   header = with_tooltip(
#     "R2W%",
#     "Odds the team wins a game in the round of 2 (and win the national title)"),
#   format = colFormat(percent = TRUE,
#                      digits = 1),
#   style = color_scales(Season_Sim,
#                        colors = white_to_orange))
)) %>%
add_title("2024 DIII Football Season Simulation") %>%
add_subtitle("Results from 10,000 simulations of the 2024 season using predictive Hansen Ratings",
font_size = 15, font_weight = "normal", font_style = "italic") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2024 Season Simulation.html")
# Playoff_Sim <- read_csv("2024 Playoff Simulation.csv")
Game_Proj <- read_csv("2024 Week 8 Games.csv")
setwd("C:/Users/logan/OneDrive/R/Hansen Ratings")
# Playoff_Sim <- read_csv("2024 Playoff Simulation.csv")
Game_Proj <- read_csv("2024 Week 8 Games.csv")
setwd("C:/Users/logan/OneDrive/Documents/hansenratings.github.io")
Game_Proj %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = TRUE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Home = colDef(
minWidth = 200),
'H Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'H Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Away = colDef(
minWidth = 200,
sticky = "left"),
'A Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'A Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Spread = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Total = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'Game Score' = colDef(
minWidth = 100,
header = with_tooltip(
"Game Score",
"A meaningless number that correlates with the quality of the teams and how close the game is expected to be"),
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31")))
)) %>%
add_title("2024 DIII Football Game Projections") %>%
add_subtitle(game_week) %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2024 Week 8.html")
setwd("C:/Users/logan/OneDrive/R/Hansen Ratings")
# Playoff_Sim <- read_csv("2024 Playoff Simulation.csv")
Game_Proj <- read_csv("2024 Week 8 Games.csv")
setwd("C:/Users/logan/OneDrive/Documents/hansenratings.github.io")
Game_Proj %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = TRUE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Home = colDef(
minWidth = 200),
'H Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'H Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Away = colDef(
minWidth = 200,
sticky = "left"),
'A Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'A Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Spread = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Total = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'Game Score' = colDef(
minWidth = 100,
header = with_tooltip(
"Game Score",
"A meaningless number that correlates with the quality of the teams and how close the game is expected to be"),
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31")))
)) %>%
add_title("2024 DIII Football Game Projections") %>%
add_subtitle(game_week) %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2024 Week 8.html")
