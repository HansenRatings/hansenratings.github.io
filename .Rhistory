Playoff_Sim %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
School = colDef(
headerStyle = list(display = "flex", justifyContent = "center"),
minWidth = 200,
filterable = TRUE,
sticky = "left"),
AdjEff = colDef(
minWidth = 60,
header = with_tooltip(
"AdjEff",
"Opponent-adjusted net efficiency - the team's projected margin of victory against an average opponent on a neutral field"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = blue_to_orange)),
AdjO = colDef(
minWidth = 60,
header = with_tooltip(
"AdjO",
"Opponent-adjusted offensive efficiency - the team's projected points for against an average defense on a neutral field"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = white_to_orange)),
AdjD = colDef(
minWidth = 60,
header = with_tooltip(
"AdjD",
"Opponent-adjusted defensive efficiency - the team's projected points allowed against an average offense on a neutral field"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = blue_to_white)),
AdjHFA = colDef(
minWidth = 75,
header = with_tooltip(
"AdjHFA",
"Opponent-adjusted home-field advantage - the expected positive/negative difference in team performance from a neutral field to home/away"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = blue_to_orange)),
'R32W%' = colDef(
minWidth = 75,
header = with_tooltip(
"R32W%",
"Odds the team wins a game in the round of 32"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Playoff_Sim,
colors = white_to_orange)),
'R16W%' = colDef(
minWidth = 75,
header = with_tooltip(
"R16W%",
"Odds the team wins a game in the round of 16"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Playoff_Sim,
colors = white_to_orange)),
'R8W%' = colDef(
minWidth = 75,
header = with_tooltip(
"R8W%",
"Odds the team wins a game in the round of 8 (quarterfinals)"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Playoff_Sim,
colors = white_to_orange)),
'R4W%' = colDef(
minWidth = 75,
header = with_tooltip(
"R4W%",
"Odds the team wins a game in the round of 4 (semifinals)"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Playoff_Sim,
colors = white_to_orange)),
'R2W%' = colDef(
minWidth = 75,
header = with_tooltip(
"R2W%",
"Odds the team wins a game in the round of 2 (and win the national title)"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Playoff_Sim,
colors = white_to_orange))
)) %>%
add_title("2023 DIII Football Playoff Simulation") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Playoff Simulation.html")
Power_Ratings %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Rank = colDef(
minWidth = 60,
sticky = "left"),
Prev = colDef(
minWidth = 60),
Team = colDef(
minWidth = 200,
filterable = TRUE,
sticky = "left"),
Conf = colDef(
minWidth = 95,
filterable = TRUE),
Region = colDef(
minWidth = 70,
filterable = TRUE),
AdjEff = colDef(
minWidth = 60,
header = with_tooltip(
"AdjEff",
"Opponent-adjusted net efficiency - the team's projected margin of victory against an average opponent on a neutral field"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = blue_to_orange)),
AdjO = colDef(
minWidth = 60,
header = with_tooltip(
"AdjO",
"Opponent-adjusted offensive efficiency - the team's projected points for against an average defense on a neutral field"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = white_to_orange)),
AdjD = colDef(
minWidth = 60,
header = with_tooltip(
"AdjD",
"Opponent-adjusted defensive efficiency - the team's projected points allowed against an average offense on a neutral field"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = blue_to_white)),
AdjHFA = colDef(
minWidth = 75,
header = with_tooltip(
"AdjHFA",
"Opponent-adjusted home-field advantage - the expected positive/negative difference in team performance from a neutral field to home/away"),
format = colFormat(digits = 1),
style = color_scales(Power_Ratings,
colors = blue_to_orange))
)) %>%
add_title("2023 DIII Football Predictive Ratings") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Predictive Ratings.html")
Resume_Rankings %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Rank = colDef(
minWidth = 60,
header = with_tooltip(
"Rank",
"Teams are ranked according to a mixture of all of the metrics on this page - 'who did you beat, and how well did you play?'"),
sticky = "left"),
Prev = colDef(
minWidth = 60),
Team = colDef(
minWidth = 200,
filterable = TRUE,
sticky = "left"),
Conf = colDef(
minWidth = 95,
filterable = TRUE),
Region = colDef(
minWidth = 70,
filterable = TRUE),
'MOV+' = colDef(
minWidth = 60,
header = with_tooltip(
"MOV+",
"Margin of victory 'plus', how much more or less you've outscored your opponents than a typical Top 25 team would be expected to"),
format = colFormat(digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_orange)),
SOR = colDef(
minWidth = 70,
header = with_tooltip(
"SOR",
"Strength of record, represented as the likelihood a typical Top 25 team would have a W-L record at least as good against the same opponents"),
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_white)),
'E+' = colDef(
minWidth = 60,
header = with_tooltip(
"E+",
"Elite games, the percentage of games where the team performed at an elite level or better (+36 points per game relative to an average team)"),
format = colFormat(percent = TRUE,
digits = 0),
style = color_scales(Resume_Rankings,
colors = white_to_orange)),
'G+' = colDef(
minWidth = 60,
header = with_tooltip(
"G+",
"Good games, the percentage of games where the team performed at a good level or better (+18 points per game relative to an average team)"),
format = colFormat(percent = TRUE,
digits = 0),
style = color_scales(Resume_Rankings,
colors = white_to_orange)),
'A+' = colDef(
minWidth = 60,
header = with_tooltip(
"A+",
"Average games, the percentage of games where the team performed at an average level or better"),
format = colFormat(percent = TRUE,
digits = 0),
style = color_scales(Resume_Rankings,
colors = white_to_orange)),
BA = colDef(
minWidth = 60,
header = with_tooltip(
"BA",
"Below average games, the percentage of games where the team performed at a below average level"),
format = colFormat(percent = TRUE,
digits = 0),
style = color_scales(Resume_Rankings,
colors = blue_to_white)),
EAW = colDef(
minWidth = 60,
header = with_tooltip(
"EAW",
"Elite adjusted wins, how many more/fewer games the team has won than an elite team (+36 points per game relative to an average team) would be expected to win"),
format = colFormat(digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_orange)),
GAW = colDef(
minWidth = 60,
header = with_tooltip(
"GAW",
"Good adjusted wins, how many more/fewer games the team has won than a good team (+18 points per game relative to an average team) would be expected to win"),
format = colFormat(digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_orange)),
AAW = colDef(
minWidth = 60,
header = with_tooltip(
"AAW",
"Average adjusted wins, how many more/fewer games the team has won than an average team would be expected to win"),
format = colFormat(digits = 1),
style = color_scales(Resume_Rankings,
colors = blue_to_orange)),
Wins = colDef(
minWidth = 60,
header = with_tooltip(
"Wins",
"Season-to-date wins against all opponents")),
Losses = colDef(
minWidth = 70,
header = with_tooltip(
"Losses",
"Season-to-date losses against all opponents")),
'DIII W' = colDef(
minWidth = 65,
header = with_tooltip(
"DIII W",
"Season-to-date wins against Division III opponents")),
'DIII L' = colDef(
minWidth = 60,
header = with_tooltip(
"DIII L",
"Season-to-date losses against Division III opponents")),
'Conf W' = colDef(
minWidth = 75,
header = with_tooltip(
"Conf W",
"Season-to-date wins against conference opponents (may not align with official conference standings, if the team plays some conference members as a 'non-conference' opponent)")),
'Conf L' = colDef(
minWidth = 70,
header = with_tooltip(
"Conf L",
"Season-to-date losses against conference opponents (may not align with official conference standings, if the team plays some conference members as a 'non-conference' opponent)"))
)) %>%
add_title("2023 DIII Football Resume Rankings") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Resume Rankings.html")
Game_Proj %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = TRUE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Home = colDef(
minWidth = 200),
'H Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'H Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Away = colDef(
minWidth = 200,
sticky = "left"),
'A Score' = colDef(
name = "Score",
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'A Win%' = colDef(
name = "Win%",
minWidth = 70,
format = colFormat(percent = TRUE,
digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Spread = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#323e4f","#ffffff","#ed7d31"))),
Total = colDef(
minWidth = 70,
format = colFormat(digits = 1),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31"))),
'Game Score' = colDef(
minWidth = 100,
header = with_tooltip(
"Game Score",
"A meaningless number that correlates with the quality of the teams and how close the game is expected to be"),
format = colFormat(digits = 3),
style = color_scales(Game_Proj,
colors = c("#ffffff","#ed7d31")))
)) %>%
add_title("2023 DIII Football Game Projections") %>%
add_subtitle(game_week) %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Round 1.html")
Schedules %>% reactable(pagination = FALSE,
style = list(fontFamily = "Raleway"),
defaultSortOrder = "desc",
searchable = FALSE,
highlight = TRUE,
rownames = TRUE,
showSortIcon = FALSE,
defaultColDef = colDef(
style = JS("function(rowInfo, column, state) {
// Highlight sorted columns
for (let i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === column.id) {
return { background: 'rgba(0, 0, 0, 0.05)' }
}
}
}")
),
columns = list(
.rownames = colDef(show = FALSE),
Rank = colDef(
minWidth = 60,
header = with_tooltip(
"Rank",
"Teams are ranked according to a mixture of all of the metrics on this page - 'who did you beat, and how well did you play?'"),
sticky = "left"),
Team = colDef(
minWidth = 200,
filterable = TRUE,
sticky = "left"),
Conf = colDef(
minWidth = 95,
filterable = TRUE),
Region = colDef(
minWidth = 70,
filterable = TRUE),
'To-Date SOS' = colDef(
minWidth = 75,
header = with_tooltip(
"To-Date SOS",
"To-date strength of schedule, represented as the average expected win probability of the team's past opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'To-Date SOS+' = colDef(
minWidth = 75,
header = with_tooltip(
"To-Date SOS+",
"To-date strength of schedule 'plus', represented as the average expected win probability of the team's past opponents against a typical Top 25 team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'To-Date NCSOS' = colDef(
minWidth = 75,
header = with_tooltip(
"To-Date NCSOS",
"To-date non-conference strength of schedule, considering non-conference opponents only, represented as the average expected win probability of the team's past opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
SOS = colDef(
minWidth = 75,
header = with_tooltip(
"SOS",
"Strength of schedule, represented as the average expected win probability of the team's opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'SOS+' = colDef(
minWidth = 75,
header = with_tooltip(
"SOS+",
"Strength of schedule 'plus', represented as the average expected win probability of the team's opponents against a typical Top 25 team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
NCSOS = colDef(
minWidth = 75,
header = with_tooltip(
"NCSOS",
"Non-conference strength of schedule, considering non-conference opponents only, represented as the average expected win probability of the team's opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'Future SOS' = colDef(
minWidth = 75,
header = with_tooltip(
"Future SOS",
"Future strength of schedule, represented as the average expected win probability of the team's future opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'Future SOS+' = colDef(
minWidth = 75,
header = with_tooltip(
"Future SOS+",
"Future strength of schedule 'plus', represented as the average expected win probability of the team's future opponents against a typical Top 25 team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange)),
'Future NCSOS' = colDef(
minWidth = 75,
header = with_tooltip(
"Future NCSOS",
"Future non-conference strength of schedule, considering non-conference opponents only, represented as the average expected win probability of the team's future opponents against an average team"),
format = colFormat(digits = 3),
style = color_scales(Schedules,
colors = blue_to_orange))
)) %>%
add_title("2023 DIII Football Strength of Schedule") %>%
add_subtitle(date_of_update,
font_size = 10, font_weight = "normal", font_style = "italic") %>%
reactablefmtr::google_font(font_family = "Raleway") %>%
save_reactable_test("2023 Schedule Strength.html")
